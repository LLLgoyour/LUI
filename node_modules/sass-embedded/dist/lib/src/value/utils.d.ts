/** The precision of Sass numbers. */
export declare const precision = 10;
/** Whether `num1` and `num2` are equal within `epsilon`. */
export declare function fuzzyEquals(num1: number, num2: number): boolean;
/**
 * Returns a hash code for `num`.
 *
 * Two numbers that `fuzzyEquals` each other must have the same hash code.
 */
export declare function fuzzyHashCode(num: number): number;
/** Whether `num1` < `num2`, within `epsilon`. */
export declare function fuzzyLessThan(num1: number, num2: number): boolean;
/** Whether `num1` <= `num2`, within `epsilon`. */
export declare function fuzzyLessThanOrEquals(num1: number, num2: number): boolean;
/** Whether `num1` > `num2`, within `epsilon`. */
export declare function fuzzyGreaterThan(num1: number, num2: number): boolean;
/** Whether `num1` >= `num2`, within `epsilon`. */
export declare function fuzzyGreaterThanOrEquals(num1: number, num2: number): boolean;
/** Whether `num` `fuzzyEquals` an integer. */
export declare function fuzzyIsInt(num: number): boolean;
/**
 * If `num` `fuzzyIsInt`, returns it as an integer. Otherwise, returns `null`.
 */
export declare function fuzzyAsInt(num: number): number | null;
/**
 * Rounds `num` to the nearest integer.
 *
 * If `num` `fuzzyEquals` `x.5`, rounds away from zero.
 */
export declare function fuzzyRound(num: number): number;
/**
 * Returns `num` if it's within `min` and `max`, or `null` if it's not.
 *
 * If `num` `fuzzyEquals` `min` or `max`, it gets clamped to that value.
 */
export declare function fuzzyInRange(num: number, min: number, max: number): number | null;
