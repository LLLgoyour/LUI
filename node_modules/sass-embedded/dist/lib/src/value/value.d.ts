import { List, OrderedMap, ValueObject } from 'immutable';
import { SassBoolean } from './boolean';
import { SassNumber } from './number';
import { SassString } from './string';
/**
 * A SassScript value.
 *
 * All SassScript values are immutable.
 *
 * Concrete values (such as `SassColor`) are implemented as subclasses and get
 * instantiated as normal JS classes.
 *
 * Untyped values can be cast to particular types using `assert*()` functions,
 * which throw user-friendly error messages if they fail.
 *
 * All values, except `false` and `null`, count as `true`.
 *
 * All values can be used as lists. Maps count as lists of pairs, while all
 * other values count as single-value lists.
 */
export declare abstract class Value implements ValueObject {
    /** Whether `this` counts as `true`. */
    get isTruthy(): boolean;
    /** Returns JS null if `this` is `sassNull`. Otherwise, returns `this`. */
    get realNull(): Value | null;
    /** `this` as a list. */
    get asList(): List<Value>;
    /** The separator for `this` as a list. */
    get separator(): null;
    /** Whether `this`, as a list, has brackets. */
    get hasBrackets(): boolean;
    /**
     * Converts `sassIndex` to a JS index into the array returned by `asList`.
     *
     * Sass indices start counting at 1, and may be negative in order to index
     * from the end of the list.
     *
     * `sassIndex` must be...
     * - a number, and
     * - an integer, and
     * - a valid index into `asList`.
     *
     * Otherwise, this throws an error.
     *
     * If `this` came from a function argument, `name` is the argument name
     * (without the `$`) and is used for error reporting.
     */
    sassIndexToListIndex(sassIndex: Value, name?: string): number;
    /**
     * Casts `this` to `SassBoolean`; throws if `this` isn't a boolean.
     *
     * If `this` came from a function argument, `name` is the argument name
     * (without the `$`) and is used for error reporting.
     */
    assertBoolean(name?: string): SassBoolean;
    /**
     * Casts `this` to `SassColor`; throws if `this` isn't a color.
     *
     * If `this` came from a function argument, `name` is the argument name
     * (without the `$`) and is used for error reporting.
     */
    assertColor(name?: string): Value;
    /**
     * Casts `this` to `SassFunction`; throws if `this` isn't a function
     * reference.
     *
     * If `this` came from a function argument, `name` is the argument name
     * (without the `$`) and is used for error reporting.
     */
    assertFunction(name?: string): Value;
    /**
     * Casts `this` to `SassMap`; throws if `this` isn't a map.
     *
     * If `this` came from a function argument, `name` is the argument name
     * (without the `$`) and is used for error reporting.
     */
    assertMap(name?: string): Value;
    /**
     * Returns `this` as a `SassMap` if it counts as one (including empty lists),
     * or `null` if it does not.
     */
    tryMap(): OrderedMap<Value, Value> | null;
    /**
     * Casts `this` to `SassString`; throws if `this` isn't a string.
     *
     * If `this` came from a function argument, `name` is the argument name
     * (without the `$`) and is used for error reporting.
     */
    assertNumber(name?: string): SassNumber;
    /**
     * Casts `this` to `SassString`; throws if `this` isn't a string.
     *
     * If `this` came from a function argument, `name` is the argument name
     * (without the `$`) and is used for error reporting.
     */
    assertString(name?: string): SassString;
    /** Whether `this == other` in SassScript. */
    abstract equals(other: Value): boolean;
    /** This is the same for values that are `==` in SassScript. */
    abstract hashCode(): number;
    /** A meaningful descriptor for this value. */
    abstract toString(): string;
}
