import { Value } from './value';
/** A SassScript string. */
export declare class SassString extends Value {
    private readonly textInternal;
    private readonly hasQuotesInternal;
    /** Creates a string with `text`, optionally with quotes. */
    constructor(text: string, options?: {
        quotes?: boolean;
    });
    /** Creates an empty string, optionally with quotes. */
    static empty(options?: {
        quotes?: boolean;
    }): SassString;
    /** `this`'s text. */
    get text(): string;
    /** Whether `this` has quotes. */
    get hasQuotes(): boolean;
    assertString(): SassString;
    /**
     * Sass's notion of `this`'s length.
     *
     * Sass treats strings as a series of Unicode code points while JS treats them
     * as a series of UTF-16 code units. For example, the character U+1F60A,
     * Smiling Face With Smiling Eyes, is a single Unicode code point but is
     * represented in UTF-16 as two code units (`0xD83D` and `0xDE0A`). So in
     * JS, `"nðŸ˜Šb".length` returns `4`, whereas in Sass `string.length("nðŸ˜Šb")`
     * returns `3`.
     */
    sassLength(): number;
    /**
     * Converts `sassIndex` to a JS index into `text`.
     *
     * Sass indices are one-based, while JS indices are zero-based. Sass
     * indices may also be negative in order to index from the end of the string.
     *
     * In addition, Sass indices refer to Unicode code points while JS string
     * indices refer to UTF-16 code units. For example, the character U+1F60A,
     * Smiling Face With Smiling Eyes, is a single Unicode code point but is
     * represented in UTF-16 as two code units (`0xD83D` and `0xDE0A`). So in
     * JS, `"nðŸ˜Šb".charAt(1)` returns `0xD83D`, whereas in Sass
     * `string.slice("nðŸ˜Šb", 1, 1)` returns `"ðŸ˜Š"`.
     *
     * This function converts Sass's code point indices to JS's code unit
     * indices. This means it's O(n) in the length of `text`.
     *
     * Throws an error `sassIndex` isn't a number, if that number isn't an
     * integer, or if that integer isn't a valid index for this string.
     *
     * If `sassIndex` came from a function argument, `name` is the argument name
     * (without the `$`) and is used for error reporting.
     */
    sassIndexToStringIndex(sassIndex: Value, name?: string): number;
    equals(other: Value): boolean;
    hashCode(): number;
    toString(): string;
}
