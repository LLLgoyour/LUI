"use strict";
// Copyright 2020 Google Inc. Use of this source code is governed by an
// MIT-style license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const path_1 = require("path");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
/**
 * Invokes the Embedded Sass Compiler as a Node child process, exposing its
 * stdio as Observables.
 */
class EmbeddedCompiler {
    constructor() {
        this.process = child_process_1.spawn(path_1.resolve(__dirname, `../vendor/dart-sass-embedded/dart-sass-embedded${process.platform === 'win32' ? '.bat' : ''}`), {
            windowsHide: true,
        });
        /** The child process's exit event. */
        this.exit$ = new rxjs_1.Observable(observer => {
            this.process.on('exit', code => observer.next(code));
        });
        /** The buffers emitted by the child process's stdout. */
        this.stdout$ = new rxjs_1.Observable(observer => {
            this.process.stdout.on('data', buffer => observer.next(buffer));
        }).pipe(operators_1.takeUntil(this.exit$));
        /** The buffers emitted by the child process's stderr. */
        this.stderr$ = new rxjs_1.Observable(observer => {
            this.process.stderr.on('data', buffer => observer.next(buffer));
        }).pipe(operators_1.takeUntil(this.exit$));
    }
    /** Writes `buffer` to the child process's stdin. */
    writeStdin(buffer) {
        this.process.stdin.write(buffer);
    }
    /** Kills the child process, cleaning up all associated Observables. */
    close() {
        this.process.stdin.end();
    }
}
exports.EmbeddedCompiler = EmbeddedCompiler;
//# sourceMappingURL=compiler.js.map