/// <reference types="node" />
import { Observable } from 'rxjs';
/**
 * Decodes arbitrarily-chunked buffers, for example
 *   [ 0 1 2 3 4 5 6 7 ... ],
 * into packets of set length in the form
 *   +---------+------------- ...
 *   | 0 1 2 3 | 4 5 6 7 ...
 *   +---------+------------- ...
 *   | HEADER  | PAYLOAD (PROTOBUF)
 *   +---------+------------- ...
 * and emits the payload of each packet.
 *
 * Encodes packets by attaching a header to a protobuf that describes the
 * protobuf's length.
 */
export declare class PacketTransformer {
    private readonly outboundBuffers$;
    private readonly writeInboundBuffer;
    private packet;
    private readonly outboundProtobufsInternal$;
    /**
     * The fully-decoded, outbound protobufs. If any errors are encountered
     * during encoding/decoding, this Observable will error out.
     */
    readonly outboundProtobufs$: Observable<Buffer>;
    constructor(outboundBuffers$: Observable<Buffer>, writeInboundBuffer: (buffer: Buffer) => void);
    /**
     * Encodes a packet by pre-fixing `protobuf` with a header that describes its
     * length.
     */
    writeInboundProtobuf(protobuf: Buffer): void;
    private decode;
}
