"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const exception_1 = require("../exception/exception");
/**
 * Creates a SassException from the given protocol `buffer`. Throws if the
 * buffer has invalid fields.
 */
function deprotifyException(buffer) {
    const span = buffer.getSpan();
    return new exception_1.SassException(buffer.getMessage(), buffer.getFormatted(), span ? deprotifySourceSpan(span) : undefined, buffer.getStackTrace());
}
exports.deprotifyException = deprotifyException;
// Creates a SourceSpan from the given protocol `buffer`. Throws if the buffer
// has invalid fields.
function deprotifySourceSpan(buffer) {
    const text = buffer.getText();
    if (buffer.getStart() === undefined) {
        throw utils_1.compilerError('Expected SourceSpan to have start.');
    }
    const start = deprotifySourceLocation(buffer.getStart());
    let end;
    if (buffer.getEnd() === undefined) {
        if (text !== '') {
            throw utils_1.compilerError('Expected SourceSpan text to be empty.');
        }
    }
    else {
        end = deprotifySourceLocation(buffer.getEnd());
        if (end.offset < start.offset) {
            throw utils_1.compilerError('Expected SourceSpan end to be after start.');
        }
    }
    const url = buffer.getUrl() === '' ? undefined : buffer.getUrl();
    const context = buffer.getContext() === '' ? undefined : buffer.getContext();
    return {
        text,
        start,
        end,
        url,
        context,
    };
}
// Creates a SourceLocation from the given protocol `buffer`.
function deprotifySourceLocation(buffer) {
    return {
        offset: buffer.getOffset(),
        line: buffer.getLine(),
        column: buffer.getColumn(),
    };
}
//# sourceMappingURL=utils.js.map