"use strict";
// Copyright 2020 Google Inc. Use of this source code is governed by an
// MIT-style license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.
Object.defineProperty(exports, "__esModule", { value: true });
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const embedded_sass_pb_1 = require("../vendor/embedded-protocol/embedded_sass_pb");
const request_tracker_1 = require("./request-tracker");
/**
 * Dispatches requests, responses, and events.
 *
 * Accepts callbacks for processing different types of outbound requests. When
 * an outbound request arrives, this runs the appropriate callback to process
 * it, and then sends the result inbound. A single callback must be provided for
 * each outbound request type. The callback does not need to set the response
 * ID; the dispatcher handles it.
 *
 * Consumers can send an inbound request. This returns a promise that will
 * either resolve with the corresponding outbound response, or error if any
 * Protocol Errors were encountered. The consumer does not need to set the
 * request ID; the dispatcher handles it.
 *
 * Outbound events are exposed as Observables.
 *
 * Errors are not otherwise exposed to the top-level. Instead, they are surfaced
 * as an Observable that consumers may choose to subscribe to. Subscribers must
 * perform proper error handling.
 */
class Dispatcher {
    constructor(outboundMessages$, writeInboundMessage, outboundRequestHandlers) {
        this.outboundMessages$ = outboundMessages$;
        this.writeInboundMessage = writeInboundMessage;
        this.outboundRequestHandlers = outboundRequestHandlers;
        // Tracks the IDs of all inbound requests. An outbound response with matching
        // ID and type will remove the ID.
        this.pendingInboundRequests = new request_tracker_1.RequestTracker();
        // Tracks the IDs of all outbound requests. An inbound response with matching
        // ID and type will remove the ID.
        this.pendingOutboundRequests = new request_tracker_1.RequestTracker();
        // All outbound messages. If we detect any errors while dispatching messages,
        // this completes.
        this.messages$ = new rxjs_1.Subject();
        // If the dispatcher encounters an error, this errors out. It is publicly
        // exposed as a readonly Observable.
        this.errorInternal$ = new rxjs_1.Subject();
        /**
         * If the dispatcher encounters an error, this errors out. Upon error, the
         * dispatcher rejects all promises awaiting an outbound response, and silently
         * closes all subscriptions to outbound events.
         */
        this.error$ = this.errorInternal$.pipe();
        /**
         * Outbound log events. If an error occurs, the dispatcher closes this
         * silently.
         */
        this.logEvents$ = this.messages$.pipe(operators_1.filter(message => message.type === embedded_sass_pb_1.OutboundMessage.MessageCase.LOG_EVENT), operators_1.map(message => message.payload));
        this.outboundMessages$
            .pipe(operators_1.mergeMap(async (message) => {
            await this.handleOutboundMessage(message);
            return message;
        }))
            .subscribe(message => this.messages$.next(message), error => this.throwAndClose(error), () => {
            this.messages$.complete();
            this.errorInternal$.complete();
        });
    }
    /**
     * Sends a CompileRequest inbound. Returns a promise that will either resolve
     * with the corresponding outbound CompileResponse, or error if any Protocol
     * Errors were encountered.
     */
    sendCompileRequest(request) {
        return this.handleInboundRequest(request, embedded_sass_pb_1.InboundMessage.MessageCase.COMPILE_REQUEST, embedded_sass_pb_1.OutboundMessage.MessageCase.COMPILE_RESPONSE);
    }
    // Rejects with `error` all promises awaiting an outbound response, and
    // silently closes all subscriptions awaiting outbound events.
    throwAndClose(error) {
        this.messages$.complete();
        this.errorInternal$.error(error);
    }
    // Keeps track of all outbound messages. If the outbound `message` contains a
    // request or response, registers it with pendingOutboundRequests. If it
    // contains a request, runs the appropriate callback to generate an inbound
    // response, and then sends it inbound.
    async handleOutboundMessage(message) {
        switch (message.type) {
            case embedded_sass_pb_1.OutboundMessage.MessageCase.LOG_EVENT:
                break;
            case embedded_sass_pb_1.OutboundMessage.MessageCase.COMPILE_RESPONSE:
                this.pendingInboundRequests.resolve(message.payload.getId(), message.type);
                break;
            case embedded_sass_pb_1.OutboundMessage.MessageCase.IMPORT_REQUEST: {
                const request = message.payload;
                const id = request.getId();
                const type = embedded_sass_pb_1.InboundMessage.MessageCase.IMPORT_RESPONSE;
                this.pendingOutboundRequests.add(id, type);
                const response = await this.outboundRequestHandlers.handleImportRequest(request);
                this.sendInboundMessage(id, response, type);
                break;
            }
            case embedded_sass_pb_1.OutboundMessage.MessageCase.FILE_IMPORT_REQUEST: {
                const request = message.payload;
                const id = request.getId();
                const type = embedded_sass_pb_1.InboundMessage.MessageCase.FILE_IMPORT_RESPONSE;
                this.pendingOutboundRequests.add(id, type);
                const response = await this.outboundRequestHandlers.handleFileImportRequest(request);
                this.sendInboundMessage(id, response, type);
                break;
            }
            case embedded_sass_pb_1.OutboundMessage.MessageCase.CANONICALIZE_REQUEST: {
                const request = message.payload;
                const id = request.getId();
                const type = embedded_sass_pb_1.InboundMessage.MessageCase.CANONICALIZE_RESPONSE;
                this.pendingOutboundRequests.add(id, type);
                const response = await this.outboundRequestHandlers.handleCanonicalizeRequest(request);
                this.sendInboundMessage(id, response, type);
                break;
            }
            case embedded_sass_pb_1.OutboundMessage.MessageCase.FUNCTION_CALL_REQUEST: {
                const request = message.payload;
                const id = request.getId();
                const type = embedded_sass_pb_1.InboundMessage.MessageCase.FUNCTION_CALL_RESPONSE;
                this.pendingOutboundRequests.add(id, type);
                const response = await this.outboundRequestHandlers.handleFunctionCallRequest(request);
                this.sendInboundMessage(id, response, type);
                break;
            }
            default:
                throw Error(`Unknown message type ${message.type}`);
        }
    }
    // Sends a `request` of type `requestType` inbound. Returns a promise that
    // will either resolve with the corresponding outbound response of type
    // `responseType`, or error if any Protocol Errors were encountered.
    handleInboundRequest(request, requestType, responseType) {
        return new Promise((resolve, reject) => {
            if (this.messages$.isStopped) {
                reject(Error('Tried writing to closed dispatcher'));
            }
            this.messages$
                .pipe(operators_1.filter(message => message.type === responseType), operators_1.map(message => message.payload), operators_1.filter(response => response.getId() === request.getId()))
                .subscribe({ next: resolve });
            this.error$.subscribe({ error: reject });
            try {
                this.sendInboundMessage(this.pendingInboundRequests.nextId, request, requestType);
            }
            catch (error) {
                this.throwAndClose(error);
            }
        });
    }
    // Sends a message inbound. Keeps track of all pending inbound requests.
    sendInboundMessage(id, payload, type) {
        payload.setId(id);
        if (type === embedded_sass_pb_1.InboundMessage.MessageCase.COMPILE_REQUEST) {
            this.pendingInboundRequests.add(id, embedded_sass_pb_1.OutboundMessage.MessageCase.COMPILE_RESPONSE);
        }
        else if (type === embedded_sass_pb_1.InboundMessage.MessageCase.IMPORT_RESPONSE ||
            type === embedded_sass_pb_1.InboundMessage.MessageCase.FILE_IMPORT_RESPONSE ||
            type === embedded_sass_pb_1.InboundMessage.MessageCase.CANONICALIZE_RESPONSE ||
            type === embedded_sass_pb_1.InboundMessage.MessageCase.FUNCTION_CALL_RESPONSE) {
            this.pendingOutboundRequests.resolve(id, type);
        }
        else {
            throw Error(`Unknown message type ${type}`);
        }
        this.writeInboundMessage({
            payload,
            type,
        });
    }
}
exports.Dispatcher = Dispatcher;
//# sourceMappingURL=dispatcher.js.map